{
  "version": 3,
  "sources": ["../lib/index.ts", "../node_modules/nanoid/index.js", "../node_modules/nanoid/url-alphabet/index.js"],
  "sourcesContent": ["import { nanoid } from \"nanoid\";\r\n\r\n// \u7F13\u5B58\u5BF9\u8C61\uFF0C\u7528\u4E8E\u6D4B\u8BD5\u6216\u68C0\u6D4B\r\nexport const throttleUrlCache = {} as { [url: string]: Set<string> };\r\nexport type IredisConfig = {\r\n  preKey: string;\r\n  incr: Function;\r\n  decr: Function;\r\n  expire: Function;\r\n};\r\n/* \u9650\u5236\u4E00\u4E2A url \u7684\u5E76\u53D1\u6570\uFF0C\u8FD4\u56DE\u4E00\u4E2Aremove\u65B9\u6CD5\uFF0C\u5728\u63A5\u53E3\u6267\u884C\u7ED3\u675F\u65F6\uFF08\u6210\u529F\u6216\u5931\u8D25\uFF09\u8C03\u7528remove\u65B9\u6CD5 */\r\nexport const throttleUrl = async ({\r\n  url,\r\n  max,\r\n  onMax,\r\n  timeout,\r\n  redisConfig,\r\n}: {\r\n  // \u63A5\u53E3URL\r\n  url: string;\r\n  // \u82E5\u9047\u5230\u9519\u8BEF\r\n  onMax: (size: number) => any;\r\n  // \u6700\u5927\u5E76\u53D1\u91CF\r\n  max: number;\r\n  // \u6BCF\u6761\u4EFB\u52A1\u8D85\u65F6\u81EA\u52A8\u5220\u9664\r\n  timeout: number;\r\n  //\u662F\u5426\u4F7F\u7528redis\u7F13\u5B58\r\n  redisConfig: IredisConfig;\r\n}) => {\r\n  const getRdsKey = (url: string) => {\r\n    const key = redisConfig.preKey;\r\n    return `${key}_${url}`;\r\n  };\r\n  const urlKey = getRdsKey(url);\r\n\r\n  let count = await redisConfig.incr(urlKey);\r\n  redisConfig.expire(urlKey, 60);\r\n\r\n  // console.log(\"count1\", count);\r\n\r\n  // \u6839\u636EURL\u521D\u59CB\u5316\u7F13\u5B58\u5BF9\u8C61\r\n  if (!throttleUrlCache[url]) {\r\n    throttleUrlCache[url] = new Set<string>();\r\n  }\r\n\r\n  // URL\u7F13\u5B58\u5BF9\u8C61\r\n  const box = throttleUrlCache[url];\r\n\r\n  // \u4EFB\u52A1 ID\r\n  const id = nanoid();\r\n  // \u589E\u52A0\u4E00\u4E2A\u4EFB\u52A1\r\n  box.add(id);\r\n\r\n  // \u7528\u4E8E\u79FB\u9664\u4EFB\u52A1\u7684\u65B9\u6CD5\r\n  const removeId = async () => {\r\n    // console.log(\"removeId\", i++, box.has(id));\r\n\r\n    if (box.has(id)) {\r\n      box.delete(id);\r\n      const afterRemoveCount = await redisConfig.decr(urlKey);\r\n\r\n      //   console.log(\"removeId count\", afterRemoveCount);\r\n    }\r\n  };\r\n\r\n  // \u8D85\u65F6\u540E\uFF0C\u79FB\u9664\u67D0\u4E2A\u4EFB\u52A1\r\n  setTimeout(() => {\r\n    // console.log(\"timeout\");\r\n    removeId();\r\n  }, timeout);\r\n\r\n  //   const size = box.size;\r\n  const size = count;\r\n\r\n  // \u82E5\u5F53\u524D\u4EFB\u52A1\u8D85\u8FC7\u6700\u5927\u503C, \u6267\u884C onMax \u5E76\u4E14\u8FD4\u56DE, \u79FB\u9664\u65B9\u6CD5\r\n  if (size > max) {\r\n    onMax(size);\r\n    return removeId;\r\n  }\r\n\r\n  // redisConfig.set(urlKey, Number(await redisConfig.get(urlKey)) + 1);\r\n  // console.log(\"set count\", await redisConfig.get(urlKey));\r\n\r\n  return removeId;\r\n};\r\n", "import crypto from 'crypto'\n\nimport { urlAlphabet } from './url-alphabet/index.js'\n\n// It is best to make fewer, larger requests to the crypto module to\n// avoid system call overhead. So, random numbers are generated in a\n// pool. The pool is a Buffer that is larger than the initial random\n// request size by this multiplier. The pool is enlarged if subsequent\n// requests exceed the maximum buffer size.\nconst POOL_SIZE_MULTIPLIER = 32\nlet pool, poolOffset\n\nlet random = bytes => {\n  if (!pool || pool.length < bytes) {\n    pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER)\n    crypto.randomFillSync(pool)\n    poolOffset = 0\n  } else if (poolOffset + bytes > pool.length) {\n    crypto.randomFillSync(pool)\n    poolOffset = 0\n  }\n\n  let res = pool.subarray(poolOffset, poolOffset + bytes)\n  poolOffset += bytes\n  return res\n}\n\nlet customRandom = (alphabet, size, getRandom) => {\n  // First, a bitmask is necessary to generate the ID. The bitmask makes bytes\n  // values closer to the alphabet size. The bitmask calculates the closest\n  // `2^31 - 1` number, which exceeds the alphabet size.\n  // For example, the bitmask for the alphabet size 30 is 31 (00011111).\n  let mask = (2 << (31 - Math.clz32((alphabet.length - 1) | 1))) - 1\n  // Though, the bitmask solution is not perfect since the bytes exceeding\n  // the alphabet size are refused. Therefore, to reliably generate the ID,\n  // the random bytes redundancy has to be satisfied.\n\n  // Note: every hardware random generator call is performance expensive,\n  // because the system call for entropy collection takes a lot of time.\n  // So, to avoid additional system calls, extra bytes are requested in advance.\n\n  // Next, a step determines how many random bytes to generate.\n  // The number of random bytes gets decided upon the ID size, mask,\n  // alphabet size, and magic number 1.6 (using 1.6 peaks at performance\n  // according to benchmarks).\n  let step = Math.ceil((1.6 * mask * size) / alphabet.length)\n\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      // A compact alternative for `for (let i = 0; i < step; i++)`.\n      let i = step\n      while (i--) {\n        // Adding `|| ''` refuses a random byte that exceeds the alphabet size.\n        id += alphabet[bytes[i] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\n\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\n\nlet nanoid = (size = 21) => {\n  let bytes = random(size)\n  let id = ''\n  // A compact alternative for `for (let i = 0; i < size; i++)`.\n  while (size--) {\n    // It is incorrect to use bytes exceeding the alphabet size.\n    // The following mask reduces the random byte in the 0-255 value\n    // range to the 0-63 value range. Therefore, adding hacks, such\n    // as empty string fallback or magic numbers, is unneccessary because\n    // the bitmask trims bytes down to the alphabet size.\n    id += urlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n", "// This alphabet uses `A-Za-z0-9_-` symbols. The genetic algorithm helped\n// optimize the gzip compression for this alphabet.\nlet urlAlphabet =\n  'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW'\n\nexport { urlAlphabet }\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;;;ACAA,oBAAmB;;;ACEnB,IAAI,cACF;;;ADMF,IAAM,uBAAuB;AAC7B,IAAI;AAAJ,IAAU;AAEV,IAAI,SAAS,WAAS;AACpB,MAAI,CAAC,QAAQ,KAAK,SAAS,OAAO;AAChC,WAAO,OAAO,YAAY,QAAQ;AAClC,0BAAO,eAAe;AACtB,iBAAa;AAAA,aACJ,aAAa,QAAQ,KAAK,QAAQ;AAC3C,0BAAO,eAAe;AACtB,iBAAa;AAAA;AAGf,MAAI,MAAM,KAAK,SAAS,YAAY,aAAa;AACjD,gBAAc;AACd,SAAO;AAAA;AAwCT,IAAI,SAAS,CAAC,OAAO,OAAO;AAC1B,MAAI,QAAQ,OAAO;AACnB,MAAI,KAAK;AAET,SAAO,QAAQ;AAMb,UAAM,YAAY,MAAM,QAAQ;AAAA;AAElC,SAAO;AAAA;;;ADzEF,IAAM,mBAAmB;AAQzB,IAAM,cAAc,CAAO,OAiB5B,iBAjB4B,KAiB5B,WAjB4B;AAAA,EAChC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAYI;AACJ,QAAM,YAAY,CAAC,SAAgB;AACjC,UAAM,MAAM,YAAY;AACxB,WAAO,GAAG,OAAO;AAAA;AAEnB,QAAM,SAAS,UAAU;AAEzB,MAAI,QAAQ,MAAM,YAAY,KAAK;AACnC,cAAY,OAAO,QAAQ;AAK3B,MAAI,CAAC,iBAAiB,MAAM;AAC1B,qBAAiB,OAAO,IAAI;AAAA;AAI9B,QAAM,MAAM,iBAAiB;AAG7B,QAAM,KAAK;AAEX,MAAI,IAAI;AAGR,QAAM,WAAW,MAAY;AAG3B,QAAI,IAAI,IAAI,KAAK;AACf,UAAI,OAAO;AACX,YAAM,mBAAmB,MAAM,YAAY,KAAK;AAAA;AAAA;AAOpD,aAAW,MAAM;AAEf;AAAA,KACC;AAGH,QAAM,OAAO;AAGb,MAAI,OAAO,KAAK;AACd,UAAM;AACN,WAAO;AAAA;AAMT,SAAO;AAAA;",
  "names": []
}
